<?php

namespace Database\Seeders;

use App\Models\location\City;
use App\Models\location\Metro;
use App\Models\location\Zone;
use App\Models\posts\Post;
use App\Models\posts\PostContent;
use App\Models\posts\Tags;
use App\Models\system\Getters;
use App\Models\Users;
use Carbon\Carbon;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\File;

class PostSeeder extends Seeder
{
    private Getters $getters;

    public function __construct() {
        $this->getters = new Getters;
    }

    public function run() {
        $this->clearPostsDirectory();
        $this->getters->clearFolder(public_path('images/cache'));
        $this->getters->clearFolder(public_path('images/posts'));
        $this->getters->clearFolder(public_path('images/temp'));
        $this->getters->clearFolder(storage_path('logs'));

        //Names
        $names = ['–ê–Ω–Ω–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ú–∞—Ä–∏—è', '–û–ª—å–≥–∞', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–î–∞—Ä—å—è', '–°–æ—Ñ–∏—è', '–ï–ª–µ–Ω–∞', '–¢–∞—Ç—å—è–Ω–∞', '–ò—Ä–∏–Ω–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ö—Å–µ–Ω–∏—è', '–ü–æ–ª–∏–Ω–∞', '–ù–∞—Ç–∞–ª—å—è', '–ï–≤–≥–µ–Ω–∏—è', '–ê–ª–∏—Å–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–õ—é–¥–º–∏–ª–∞', '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ö—Ä–∏—Å—Ç–∏–Ω–∞',];

        //Description
        $descriptions = [
            '–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–æ–º–Ω–∏–ª–∞—Å—å —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–º... –°–µ–∫—Å—É–∞–ª—å–Ω–∞, –≤—Å–µ–≥–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–ø–æ–º–Ω–∏–ª–∞—Å—å —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–º. –ú–æ—è –ª–∞—Å–∫–æ–≤–∞—è –∫–∏—Å–∫–∞ –∂–∞–∂–¥–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è, –∞ —Ä–æ—Ç–∏–∫ —É–∂–µ —Å–æ–≤—Å–µ–º –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ —Ä–∞–±–æ—Ç—ã. –¢–æ–ª—å–∫–æ —Å–æ –º–Ω–æ–π —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –æ—Ä–∞–ª—å–Ω—ã—Ö –ª–∞—Å–∫. –ù–∞—à–µ —Å–≤–∏–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–±—É–¥–µ—Ç—Å—è, –ø–æ–≤–µ—Ä—å!',
            '‚ú® –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú—ç–≥–≥–∏, –∏ —è ‚Äì –≤–µ—Å–µ–ª–∞—è –∏ –æ–±–∞—è—Ç–µ–ª—å–Ω–∞—è —Å–ø—É—Ç–Ω–∏—Ü–∞, –≥–æ—Ç–æ–≤–∞—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üíñ ‚ú® –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú—ç–≥–≥–∏, –∏ —è ‚Äì –≤–µ—Å–µ–ª–∞—è –∏ –æ–±–∞—è—Ç–µ–ª—å–Ω–∞—è —Å–ø—É—Ç–Ω–∏—Ü–∞, –≥–æ—Ç–æ–≤–∞—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üíñ üåπ –Ø –æ–±–æ–∂–∞—é –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã, –∞ —Ç–∞–∫–∂–µ —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. ü§ó üíã –ú–æ–π —à–∞—Ä–º –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä—è—Ç –≤–∞–º –∏—Å—Ç–∏–Ω–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ, –∞ –º–æ–∏ —è—Ä–∫–∏–µ –≥–ª–∞–∑–∞ –∏ —É–ª—ã–±–∫–∞ –∑–∞—Å—Ç–∞–≤—è—Ç –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è —á–∞—â–µ! üíï üéâ –ë—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–∞—à –≤–µ—á–µ—Ä –ø—Ä–æ–π–¥–µ—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–µ—Å–µ–ª—å—è –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∏. –Ø –ª—é–±–ª—é —É—é—Ç–Ω—ã–µ –≤–µ—á–µ—Ä–∞ –ø—Ä–∏ —Å–≤–µ—á–∞—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã! üåô üíÉ –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è! –ñ–¥—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! ‚ú®üíå',
            '–ü—Ä–∏–≥–ª–∞—à—É –Ω–∞ –≥–æ—Ä–ª–æ–≤–æ–π –º–∏–Ω–µ—Ç –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Å üíñ‚ò∫ –ü—Ä–∏–Ω–∏–º–∞—é –≤ —Å–≤–æ–µ–π —É—é—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö)) ‚ù§ –Ø –≤—ã—Å–æ–∫–∞—è 176 —Ä–æ—Å—Ç–æ–º, —Å—Ç—Ä–æ–π–Ω–∞—è —Å —à–∏–∫–∞—Ä–Ω–æ–π —Ñ–∏–≥—É—Ä–æ–π –∏ –æ—á–µ–Ω—å —É–ø—Ä—É–≥–æ–π –ø–æ–ø–æ–π üçë –í–µ—Å–µ–ª–∞—è, –Ω–µ –≥–ª—É–ø–∞—è, –Ω–∞—á–∏—Ç–∞–Ω–Ω–∞—è‚ù£Ô∏è –°–æ –º–Ω–æ–π –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –æ —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏ –æ —á–µ–º –ø–æ—Ç—Ä–∞—Ö–∞—Ç—å—Å—è ‚ù§ ‚ù§‚ù§–ê–∫—Ç–∏–≤–Ω–∞—è, –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–∞—è, —è —Å–∞–º–∞ —Ç–µ–±—è –†–∞–∑–±–æ–ª—Ç–∞—é –∏ —Å–∞–º–∞ –∫ —Ç–µ–±–µ –ø—Ä–∏—Å—Ç–∞–Ω—É üòâü•∞ –¢–∞–∫ —á—Ç–æ –Ω–∏ –æ –∫–∞–∫–æ–º —Å–º—É—â–µ–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Ä–µ—á–∏ ü•∞ –±—É–¥—É —Ä–∞–¥–∞, –µ—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—à—å –≤—ã–±–æ—Ä –Ω–∞ –º–Ω–µ üçå üçì –ë—É—Ä–Ω–æ –∫–æ–Ω—á–∞—é –æ—Ç –∫—É–Ω–∏, —Å–æ—Å—É —Å–æ —Å–ª—é–Ω–∫–∞–º–∏ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º–∏, –∫–∞–∫ –≤ –ø–æ—Ä–Ω–æ üçëüçåüí¶üí¶üí¶üí¶',
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏ —ç—Ç–æ, –≤–µ–¥—å —è —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª–∞—Å—å ü•π (–ö–æ—Ç–∏–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º, –Ω–∞ –∑–≤–æ–Ω–æ–∫ –º–æ–≥—É –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å ‚ò∫Ô∏è) –ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ :) –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É: @polinka_moscow24. –ò–º–µ–µ—Ç—Å—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ:) –í –º–æ–µ–º –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ (https://t.me/polinka_moscow) —è –ø—É–±–ª–∏–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –≥—Ä–∞—Ñ–∏–∫–µ, —É—Å–ª–æ–≤–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∏, —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ –∂–∏–∑–Ω–∏, —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —Å–µ–∫—Å–µ, –∞ —Ç–∞–∫–∂–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Å—Ç—Ä–∏–ø—Ç–∏–∑–æ–º. –Ø –æ—á–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã–π —á–µ–ª–æ–≤–µ–∫. –ú—ã –º–æ–∂–µ–º –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –ø–æ–æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —è—Ä–∫–∏–π –æ—Ç–¥—ã—Ö. –Ø –ø–æ–¥–±–µ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –º–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏. –í –Ω–∞—à–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–æ –º–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —É—Å–ª—É–≥, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Å, –º–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏, –∫—É–Ω–∏–ª–∏–Ω–≥—É—Å, –ø–æ—Ü–µ–ª—É–∏, –º–∞—Å—Å–∞–∂ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ú—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º —Å—Ö–æ–¥–∏—Ç—å –∫—É–¥–∞-–Ω–∏–±—É–¥—å:) –£ –º–µ–Ω—è –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–¥–∞—é –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏, –∏ –µ—Å—Ç—å —Å–ø—Ä–∞–≤–∫–∞. –í—Å—Ç—Ä–µ—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —É –º–µ–Ω—è, —Ç–∞–∫ –∏ –Ω–∞ –≤—ã–µ–∑–¥–µ. –Ø –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é, —á—Ç–æ –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —è. –Ø –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä, –∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –∏ –º–æ–≥—É —ç—Ç–æ –¥–æ–∫–∞–∑–∞—Ç—å. –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å: 20.000—Ä –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 2 —á–∞—Å–∞: 30.000—Ä –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 3 —á–∞—Å–∞: 40.000‚ÇΩ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 4 —á–∞—Å–∞: 50.000‚ÇΩ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 5 —á–∞—Å–æ–≤: 60.000‚ÇΩ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –Ω–æ—á—å: 80.000‚ÇΩ –ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º: @polinka_moscow24',
            '–í –Ω–µ–∫–æ—Ç–æ—Ä–æ–º —Å–º—ã—Å–ª–µ —è –æ—Ç–ª–∏—á–∞—é—Å—å –æ—Ç –º–Ω–æ–≥–∏—Ö –¥–µ–≤—É—à–µ–∫ –Ω–∞ —Å–∞–π—Ç–µ‚Ä¶ –Ø —Å–µ–∫—Å—É–∞–ª—å–Ω–∞ –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞ , –Ω–æ –≤–æ –º–Ω–µ –Ω–µ—Ç –≤—É–ª—å–≥–∞—Ä–Ω–æ—Å—Ç–∏ , –∏ —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–∫–∞–∂—É —Ç–µ–±–µ , —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å–æ –º–Ω–æ–π –≤—Å–µ . –ú—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º —Ç–æ–ª—å–∫–æ —Ç–æ , —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ –Ω–∞–º –æ–±–æ–∏–º‚Ä¶) –í–æ –≤—Ä–µ–º—è –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏ —è —Ö–æ—á—É –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–æ–±–æ–π. –ü–µ—Ä–µ—à–∞–≥–Ω—É–≤ –ø–æ—Ä–æ–≥ –º–æ–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤, —Ç—ã —É–≤–∏–¥–∏—à—å –º–∏–ª—É—é –Ω–µ–∂–Ω—É—é –∏–≥—Ä–∏–≤—É—é –∏ —é–Ω—É—é –¥–µ–≤—É—à–∫—É. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —è —É–¥–µ–ª—è—é —É—Ö–æ–¥—É –∑–∞ —Å–æ–±–æ–π. –¢–µ–±—è –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º –º–æ—è –ø–æ–¥—Ç—è–Ω—É—Ç–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, –±–∞—Ä—Ö–∞—Ç–Ω–∞—è –∫–æ–∂–∞, –±–æ–ª—å—à–∏–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∞–∑–∞ ‚Ä¶ –Ø –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ , –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞–∑–≤–∏—Ç–∞ , –∞ —Ç–∞–∫–∂–µ —ç–º–ø–∞—Ç–∏—á–Ω–∞ –∏ —Ç–æ–Ω–∫–æ —á—É–≤—Å—Ç–≤—É—é –ª—é–¥–µ–π. –ò –µ—Å–ª–∏ –º—É–∂—á–∏–Ω–∞ –∏–º–ø–æ–Ω–∏—Ä—É–µ—Ç –º–Ω–µ, —Ç–æ —è –±—É–¥—É –º–∏–ª–∞—è –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è. –ù–∏–∫–∞–∫–æ–π –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ—Å—Ç–∏. –ê —ç—Ç–æ –∑–∞–ª–æ–≥ —Ö–æ—Ä–æ—à–µ–≥–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏. –ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —É —Å–µ–±—è –≤ —Å–≤–æ–∏—Ö –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö, —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–µ—Ö–∞—Ç—å –∫ —Ç–µ–±–µ –≤ –≥–æ—Å—Ç–∏ –∏–ª–∏ –≤ –æ—Ç–µ–ª—å.) –ß—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ, –ø–∏—à–∏ –º–Ω–µ –≤ Telegram –∏–ª–∏ WhatsApp üñ§üíã –ò –¥–∞, –≥–æ–≤–æ—Ä—è—Ç, –≤ –∂–∏–∑–Ω–∏ —è –µ—â–µ –ª—É—á—à–µ —á–µ–º –Ω–∞ —Ñ–æ—Ç–æ‚Ä¶)üíé',

            '–Ø—Ä–∫–∞—è, –ø—Ä–æ—Å—Ç–æ –±–µ–∑—É–º–Ω–æ —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –≤ –≥–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞! –í –æ–±—â–µ—Å—Ç–≤–µ —Å–∏–º–ø–∞—Ç–∏—á–Ω–æ–π, —Å—Ç—Ä–∞—Å—Ç–Ω–æ–π –∏ —É–º–µ–ª–æ–π –ª—é–±–æ–≤–Ω–∏—Ü—ã –í—ã –æ—Ç–¥–æ—Ö–Ω–µ—Ç–µ –∏ –¥—É—à–æ–π –∏ —Ç–µ–ª–æ–º, –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',

            '–¢–µ–±—è –ø–æ—Ä–∞–∑–∏—Ç —Ä–æ—Å–∫–æ—à–Ω–∞—è —É–ø—Ä—É–≥–∞—è –ø–æ–ø–∫–∞, —Ç–æ—á–µ–Ω–∞—è —Ñ–∏–≥—É—Ä–∫–∞, –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–π–Ω—ã–µ –Ω–æ–∂–∫–∏ –∏ –Ω–µ–∂–Ω–∞—è –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç–∞—è –∫–æ–∂–∞. –¢—ã –∏—Å–ø—ã—Ç–∞–µ—à—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–Ω–∏–∫–∞—è –≤ –º–æ–∏ —É–∑–µ–Ω—å–∫–∏–µ –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—ã—Ä–æ—á–∫–∏. –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',

            '–ì–æ—Ç–æ–≤–∞ —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—å –Ω–æ–∂–∫–∏ –ø–µ—Ä–µ–¥ –ª—é–±–∏—Ç–µ–ª–µ–º –ø–æ–ª–∞—Å–∫–∞—Ç—å —è–∑—ã—á–∫–æ–º... –û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–æ–∂—É—Å—å –∏ –ø–æ–¥–∞—Ä—é –æ–∫–µ–∞–Ω –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –ª–∞—Å–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è!!!!–î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',

            '–ú–æ–ª–æ–¥–∞—è, –≥–∏–±–∫–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è)–ü—Ä–∏–≥–ª–∞—à–∞—é –¥–æ–±—Ä–æ–≥–æ –∏ –ø–æ—Ä—è–¥–æ—á–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É. –í—Å—Ç—Ä–µ—á—É –Ω–∞–µ–¥–∏–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é!–í—Å–µ —Ñ–æ—Ç–æ –º–æ–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!!! –ü—Ä–∏—Ö–æ–¥–∏ –∫–æ –º–Ω–µ –∏ —è –æ–∫—É–Ω—É —Ç–µ–±—è –≤ –º–∏—Ä —Å–æ–±–ª–∞–∑–Ω–∞',

            '–≠—Å—Ç–µ—Ç–∏–∫–∞ –∏ —Ä–∞–∑–≤—Ä–∞—Ç, –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—É—à–∫–∞–º–∏ (–¥–ª—è –º–µ–Ω—è –∏ —Ç–µ–±—è), —Ñ–∏–ª—å–º–∞–º–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –ø–æ–ø–µ—Ä—Å–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã! –ö–∞–∫ –≤ —Å–∞–º–æ–º –≥–æ—Ä—è—á–µ–º –ø–æ—Ä–Ω–æ!',

            '–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –∫—É–∫–æ–ª–∫–∞!!! –û–±–æ–∂–∞—é —Å–µ–∫—Å!!! –ó–≤–æ–Ω–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–≤–µ—á–∞—é –ª–∏—á–Ω–æ –Ø!!! –≠–ª–∏—Ç–Ω—ã–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.–í—Å–µ –¥–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',

            '–Ø—Ä–∫–∞—è, –∂–∏–≤–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–∫–µ—Ç–∫–∞... –Ø –ª—é–±–ª—é –¥—Ä–∞–∑–Ω–∏—Ç—å –∏ –≤–≤–æ–¥–∏—Ç—å –º—É–∂—á–∏–Ω –≤ –∏—Å–∫—É—à–µ–Ω–∏–µ!!! –ü—Ä–æ —Ç–∞–∫–∏—Ö –∫–∞–∫ —è –≥–æ–≤–æ—Ä—è—Ç , —á—Ç–æ —Ö–æ—á–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –≤—Å–µ–≥–¥–∞! –í—Å–µ –¥–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ',

            '–û—á–µ–Ω—å –º–∏–ª–∞—è –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è, —É—Ö–æ–∂–µ–Ω–Ω–∞—è! –í—Å—Ç—Ä–µ—á–∞—é—Å—å –≤ –ª—é–∫—Å –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö! –ü–∞—Ä–∫–æ–≤–∫–∞ —É –¥–æ–º–∞, —á–∏—Å—Ç—ã–π –ø–æ–¥—ä–µ–∑–¥. –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ –≤—ã–≥–ª—è–∂—É –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ –ª–∞—Å–∫–∞—é, –¥–∞—Ä—é –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é –ª—é–±—ã–µ –∂–µ–ª–∞–Ω–∏—è –º—É–∂—á–∏–Ω! –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',

            '–¢–≤–æ—è –∫–æ—Ä–æ–ª–µ–≤–∞. –ò–¥–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –≤—Å–µ –æ–±—É—Å—Ç—Ä–æ–∏–ª–∞ –¥–ª—è –í–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞! –í–æ –¥–≤–æ—Ä–µ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.–§–æ—Ç–æ –º–æ–∏ 100%–ü—Ä–∏–µ–∑–∂–∞–π)–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–±—è!)–¢–∞–∫–∂–µ –≤—ã–µ–∑–∂–∞—é –Ω–∞ –≤—ã–µ–∑–¥.–í—Å–µ –¥–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ',

            '–Ø –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é –ª–µ–≥–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–µ–ø—Ä–∏—Ç–≤–æ—Ä–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ª—é–±—ã–º –∫–∞–ø—Ä–∏–∑–∞–º –∏ –≤—Å—é —Å–≤–æ—é –ø–ª–æ—Ç—Å–∫—É—é –Ω–µ–∂–Ω–æ—Å—Ç—å. –û–±–ª–∞–¥–∞—é –≤—Å–µ–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –∏–¥–µ–∞–ª—å–Ω–æ–π –ª—é–±–æ–≤–Ω–∏—Ü—ã - —Å–µ–∫—Å–∞–ø–∏–ª—å–Ω—ã–º —Ç–µ–ª–æ–º, —Å—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–æ–º, –Ω–µ–Ω–∞—Å—ã—Ç–Ω—ã–º —Å–µ–∫—Å-–∞–ø–ø–µ—Ç–∏—Ç–æ–º –∏ –±—É–π–Ω–æ–π —Ñ–∞–Ω—Ç–∞–∑–∏–µ–π.',
        ];

        for ($i = 1; $i <= 100; $i++) {
            $photo_int = rand(0, 3);
            $selfie_int = rand(0, 3);
            $video_int = rand(0, 3);
            //User Id
            $user_id = Users::inRandomOrder()->value('id');

            //Uniq Uid
            $uniq_uid = $this->generateUniqueId($user_id.'_%s_%s');

            //City
            $cityId = City::inRandomOrder()->first();

            //Zone
            $rand_zone = rand(1, 20);
            if ($rand_zone > 5 && $rand_zone < 10) {
                $zoneId = Zone::where('city_id', $cityId->id)->inRandomOrder()->first()->id ?? null;
            } else {
                $zoneId = null;
            }

            //Metro
            $rand_metro = rand(1, 20);
            if ($rand_metro > 5 && $rand_metro < 10) {
                $metroId = Metro::where('city_id', $cityId->id)->inRandomOrder()->first()->id ?? null;
            } else {
                $metroId = null;
            }

            //Express
            $express = rand(0, 1);

            $moderation_status = 1;

            //Diamond
            $diamond = rand(0, 1);
            $diamond_date = null;
            if ($diamond && $moderation_status == 1) {
                $diamond_date = date('Y-m-d H:i:s', strtotime("+".rand(1, 26)." days ".rand(0, 23)." hours ".rand(0, 59)." minutes ".rand(0, 59)." seconds"));
            }

            //VIP
            $vip = rand(0, 1);
            $vip_date = null;
            if ($vip && $moderation_status == 1) {
                $vip_date = date('Y-m-d H:i:s', strtotime("+".rand(1, 26)." days ".rand(0, 23)." hours ".rand(0, 59)." minutes ".rand(0, 59)." seconds"));
            }

            //Color
            $color = rand(0, 1);
            $color_two = rand(0, 1);
            $color_date = null;
            if ($color && $moderation_status == 1 && $color_two) {
                $color_date = date('Y-m-d H:i:s', strtotime("+".rand(1, 26)." days ".rand(0, 23)." hours ".rand(0, 59)." minutes ".rand(0, 59)." seconds"));
            }

            //Verify
            $verify = rand(0, 1);

            //Client age
            $client_age = ["min" => rand(18, 30), "max" => rand(31, 65)];

            //Call type and time
            $call_time_type = rand(0, 1);
            if ($call_time_type) {
                $call_time = [];
            } else {
                $call_time = ["time_to" => rand(0, 12), "time_from" => rand(13, 24)];
            }

            //Call time answering to
            $answering_tos = [['id' => 1], ['id' => 2], ['id' => 3]];
            $count = rand(1, count($answering_tos));
            if ($count > 0) {
                $randomKeys = array_rand($answering_tos, $count);
                $randomKeys = (array) $randomKeys;
                foreach ($randomKeys as $key) {
                    $call_time['answering_to'][] = $answering_tos[$key]['id'];
                }
            } else {
                $call_time['answering_to'] = [];
            }

            //Language Skills
            $language_skills = app('post_language_skills');
            $language_skill = [];
            $maxCount = ceil(count($language_skills) * 0.6);
            $count = rand(1, $maxCount);
            $randomKeys = array_rand($language_skills, $count);
            $randomKeys = (array) $randomKeys;
            foreach ($randomKeys as $key) {
                $language_skill[] = (string)$language_skills[$key]['id'];
            }
            $language_skill = array_unique($language_skill);

            //Body Art
            $body_arts = app('post_body_art');
            $body_art = [];
            $maxCount = ceil(count($body_arts) * 0.2);
            $count = rand(1, $maxCount);
            $randomKeys = array_rand($body_arts, $count);
            $randomKeys = (array) $randomKeys;
            foreach ($randomKeys as $key) {
                $body_art[] = (string)$body_arts[$key]['id'];
            }
            $body_art = array_unique($body_art);

            //Services for
            $services_fours = app('post_services_for');
            $services_for = [];
            $maxCount = ceil(count($services_fours) * 0.5);
            $count = rand(1, $maxCount);
            $randomKeys = array_rand($services_fours, $count);
            $randomKeys = (array) $randomKeys;
            foreach ($randomKeys as $key) {
                $services_for[] = (string)$services_fours[$key]['id'];
            }
            $services_for = array_unique($services_for);

            //Visit Place
            $visit_places = app('post_visit_places');
            $visit_place = [];
            if (rand(0, 1)) {
                $count = rand(1, count($visit_places));
                $randomKeys = array_rand($visit_places, $count);
                foreach ((array)$randomKeys as $key) {
                    $visit_place[] = (string)$visit_places[$key]['id'];
                }
            }
            $visit_place = array_unique($visit_place);

            //Tags
            $tags = Tags::get();
            $all_tags = [];
            foreach ($tags as $tag_item) {
                $all_tags[] = ['id' => $tag_item['id']];
            }
            $tags = [];
            if (!empty($all_tags)) {
                $count = rand(1, (count($all_tags) - 20));
                $randomKeys = (array) array_rand($all_tags, $count);
                foreach ($randomKeys as $key) {
                    $tags[] = (string)$all_tags[$key]['id'];
                }
                $tags = array_unique($tags);
            }

            //Messengers
            $messengers = [];
            $telegram = rand(0,1);
            if ($telegram) {
                $messengers['telegram'] = ['status' => 1, 'type' => (rand(0,1)) ? 'link' : 'login', 'content' => 'intimatecms'];
            } else {
                $messengers['telegram'] = ['status' => 0, 'type' => 'link', 'content' => null];
            }
            $whatsapp = rand(0,1);
            if ($whatsapp) {
                $messengers['whatsapp'] = ['status' => 1, 'content' => '+7956'.rand(100,999).rand(10,99).rand(10,99)];
            } else {
                $messengers['whatsapp'] = ['status' => 0, 'content' => null];
            }
            $instagram = rand(0,1);
            if ($instagram) {
                $messengers['instagram'] = ['status' => 1, 'content' => 'https://www.instagram.com/intimate_cms/'];
            } else {
                $messengers['instagram'] = ['status' => 0, 'content' => null];
            }
            $polee = rand(0,1);
            if ($polee) {
                $messengers['polee'] = ['status' => 1, 'content' => 'https://polee.me/intimate_cms'];
            } else {
                $messengers['polee'] = ['status' => 0, 'content' => null];
            }

            $lat1 = $cityId->latitude;
            $lon1 = $cityId->longitude;
            $lat2 = ($lat1 + 0.1);
            $lon2 = ($lon1 - 0.1);
            $lat3 = ($lat2 - 0.1);
            $lon3 = ($lon2 + 0.1);
            $lat4 = ($lat2 - 0.1);
            $lon4 = ($lon2 + 0.1);
            $minLat = min($lat1, $lat2, $lat3, $lat4);
            $maxLat = max($lat1, $lat2, $lat3, $lat4);
            $minLon = min($lon1, $lon2, $lon3, $lon4);
            $maxLon = max($lon1, $lon2, $lon3, $lon4);
            $latitude = mt_rand($minLat * 1000000, $maxLat * 1000000) / 1000000;
            $longitude = mt_rand($minLon * 1000000, $maxLon * 1000000) / 1000000;

            $post = Post::create([
                'user_id' => rand(1, 4),
                'uniq_uid' => $uniq_uid,
                'name' => $names[rand(0, (count($names) - 1))],
                'city_id' => $cityId->id,
                's_individuals' => rand(0, 1),
                's_premium' => rand(0, 1),
                's_health' => rand(0, 1),
                's_elite' => rand(0, 1),
                's_bdsm' => rand(0, 1),
                's_masseuse' => rand(0, 1),
                'phone' => '+7 ('.rand(100, 999).') '.rand(100, 999).'-'.rand(10, 99).'-'.rand(10, 99),
                'zone_id' => $zoneId,
                'metro_id' => $metroId,
                'messengers' => json_encode($messengers),
                'tags' => json_encode($tags),
                'call_time_type' => $call_time_type,
                'call_time' => json_encode($call_time),
                'client_age' => json_encode($client_age),
                'delete_code' => '252325',
                'age' => rand(18, 46),
                'weight' => rand(40, 200),
                'cloth' => rand(36, 55),
                'height' => rand(150, 250),
                'breast' => rand(1, 12),
                'shoes' => rand(30, 46),
                'nationality' => rand(1, 20),
                'body_type' => rand(1, 5),
                'hair_color' => rand(1, 6),
                'hairy' => rand(1, 3),
                'body_art' => json_encode($body_art),
                'services_for' => json_encode($services_for),
                'language_skills' => json_encode($language_skill),
                'visit_places' => json_encode($visit_place),
                'services' => $this->generateServices(),
                'latitude' => $latitude,
                'longitude' => $longitude,
                'price_day_in_one' => round(rand(3000, 100000), -3),
                'price_day_in_two' => round(rand(3000, 100000), -3),
                'price_day_out_one' => round(rand(5000, 200000), -3),
                'price_day_out_two' => round(rand(5000, 200000), -3),
                'price_night_in_one' => round(rand(5000, 500000), -3),
                'price_night_in_night' => round(rand(5000, 500000), -3),
                'price_night_out_one' => round(rand(5000, 900000), -3),
                'price_night_out_night' => round(rand(5000, 900000), -3),
                'express' => $express,
                'express_price' => ($express) ? round(rand(1000, 10000), -3) : null,
                'description' => $descriptions[rand(0, (count($descriptions) - 1))],
                'diamond' => $diamond,
                'diamond_date' => $diamond_date,
                'vip' => $vip,
                'vip_date' => $vip_date,
                'color' => $color,
                'color_date' => $color_date,
                'verify' => rand(0, 1),
                'up_date' => Carbon::now()->subDays(rand(0, 30)),
                'moderation_id' => $moderation_status,
                'moderator_id' => 1,
                'publish' => 1,
                'publish_date' => Carbon::now()->addDays(rand(0, 30))->addHours(rand(0, 23))->addMinutes(rand(0, 59)),
                'created_at' => Carbon::now()->subDays(rand(0, 30))->addHours(rand(0, 23))->addMinutes(rand(0, 59)),
                'updated_at' => Carbon::now()->subDays(rand(0, 30))->addHours(rand(0, 23))->addMinutes(rand(0, 59)),
            ]);

            $post_id = $post->id;

            $content_main = 'images/posts/'.$uniq_uid.'/main';
            $content_verify = 'images/posts/'.$uniq_uid.'/verify';
            $content_photo = 'images/posts/'.$uniq_uid.'/photo';
            $content_selfie = 'images/posts/'.$uniq_uid.'/selfie';
            $content_video = 'images/posts/'.$uniq_uid.'/video';

            //Main Photo
            $image_main = $this->moveTempToFolder('/images/demo/post/'.rand(1, 10).'.png', $content_main, rand(199, 9999).'_'.$user_id.'_'.$uniq_uid);
            if ($image_main) {
                PostContent::create(['post_id' => $post_id, 'user_id' => $user_id, 'file' => $image_main, 'type' => 'main']);
            }

            //Verify Photo
            if ($verify) {
                $image_verify = $this->moveTempToFolder('/images/demo/post/'.rand(1, 10).'.png', $content_verify, rand(199, 9999).'_'.$user_id.'_'.$uniq_uid);
                if ($image_verify) {
                    PostContent::create(['post_id' => $post_id, 'user_id' => $user_id, 'file' => $image_verify, 'type' => 'verify']);
                }
            }

            //All Photo
            if ($photo_int) {
                for ($photo_i = 1;$photo_i <= $photo_int;$photo_i++) {
                    $image_photo = $this->moveTempToFolder('/images/demo/post/'.rand(1, 10).'.png', $content_photo, rand(199, 9999).'_'.$user_id.'_'.$uniq_uid);
                    if ($image_photo) {
                        PostContent::create(['post_id' => $post_id, 'user_id' => $user_id, 'file' => $image_photo, 'type' => 'photo']);
                    }
                }
            }

            //All Selfie
            if ($selfie_int) {
                for ($selfie_i = 1;$selfie_i <= $selfie_int;$selfie_i++) {
                    $image_selfie = $this->moveTempToFolder('/images/demo/post/'.rand(1, 10).'.png', $content_selfie, rand(199, 9999).'_'.$user_id.'_'.$uniq_uid);
                    if ($image_selfie) {
                        PostContent::create(['post_id' => $post_id, 'user_id' => $user_id, 'file' => $image_selfie, 'type' => 'selfie']);
                    }
                }
            }

            //All Video
            //if ($video_int) {
            //    $video_int = rand(1, 5);
            //    for ($video_i = 1;$video_i <= $video_int;$video_i++) {
            //        $image_video = $this->moveTempToFolder('/images/demo/video/'.rand(1, 11).'.mp4', $content_video, rand(199, 9999).'_'.$user_id.'_'.$uniq_uid);
            //        if ($image_video) {
            //            PostContent::create(['post_id' => $post_id, 'user_id' => $user_id, 'file' => $image_video, 'type' => 'video']);
            //        }
            //    }
            //}
        }
    }

    public function clearPostsDirectory()
    {
        $directory = public_path('/images/posts');
        if (File::exists($directory) && File::isDirectory($directory)) {
            File::cleanDirectory($directory);
        }
    }

    public function moveTempToFolder($image, $new_path, $target): ?string
    {
        $image_path = public_path($image);
        $directory = public_path($new_path);

        if (!File::exists($directory)) {
            File::makeDirectory($directory, 0755, true);
        }

        $files = File::files($directory);
        foreach ($files as $file) {
            if (preg_match('/\b' . preg_quote(mb_strtolower($target), '/') . '\b/', mb_strtolower($file->getFilename()))) {
                File::delete($file->getRealPath());
            }
        }

        $new_image_name = mb_strtolower($target) . '.' . File::extension($image_path);
        $new_image_path = $directory . '/' . $new_image_name;

        if (File::exists($image_path)) {
            File::copy($image_path, $new_image_path);
            $normalizedPath = str_replace('\\', '/', $new_image_path);
            $relativePath = strstr($normalizedPath, 'images');
            return '/' . $relativePath;
        } else {
            return null;
        }
    }

    public function generateUniqueId($template = '%s_%s'): string
    {
        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $partsCount = substr_count($template, '%s');
        $parts = [];
        for ($i = 0; $i < $partsCount; $i++) {
            $parts[] = substr(str_shuffle($characters), 0, 4);
        }
        return vsprintf($template, $parts);
    }

    public function generateServices(): bool|string
    {
        $gen_services = [];

        foreach (app('post_services') as $services) {
            $texts = ['–ó–∞ –¥–æ–ø –æ–ø–ª–∞—Ç—É', '–î–æ–ø', '–ü–æ—Å–ª—É—à–Ω–∞—è –¥–µ–≤–æ—á–∫–∞! –õ–∞–π—Ç!', '–û–±–æ–∂–∞—é —Å–æ—Å–∞—Ç—å –≥–ª—É–±–æ–∫–æ!', '–ø–æ —Å–∏–º–ø–∞—Ç–∏–∏', null, null, null, null, null];
            foreach ($services['data'] as $service) {
                if ($service['id'] != 'title') {
                    $condition = rand(1, 4);
                    $description = null;
                    $price = null;
                    if ($condition == 1) {
                        $description = $texts[rand(0, 9)];
                    }
                    if ($condition == 2) {
                        $description = $texts[rand(0, 9)];
                    }
                    if ($condition == 3) {
                        $description = $texts[rand(0, 9)];
                        $result = rand(1000, 10000);
                        $price = (int)round($result / 500) * 500;
                    }
                    $gen_services[$service['id']] = ['condition' => $condition, 'description' => (string)$description, 'price' => $price];
                }
            }
        }
        return json_encode($gen_services);
    }
}
