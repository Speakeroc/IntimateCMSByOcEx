<?php

namespace Database\Seeders;

use App\Models\location\City;
use App\Models\location\Metro;
use App\Models\location\Zone;
use App\Models\posts\Salon;
use App\Models\posts\SalonContent;
use App\Models\system\Getters;
use App\Models\Users;
use Carbon\Carbon;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\File;

class SalonSeeder extends Seeder
{
    private Getters $getters;

    public function __construct() {
        $this->getters = new Getters;
    }

    public function run() {
        $this->getters->clearFolder(public_path('images/salon'));

        //Names
        $names = ['–õ–∞–≥—É–Ω–∞', '–õ–∏—Å—å—è –ù–æ—Ä–∞', 'Dream Girls', 'ADAMANT', '–ü–æ—Ä–Ω–æ–∑–≤–µ–∑–¥–æ—á–∫–∏ *', 'Sexy Baby', '–°–∞–ª–æ–Ω KAIF', 'LUX GIRLS', '–ú—É–ª–µ–Ω –†—É–∂ –Ω–∞ –ö–∏–µ–≤—Å–∫–æ–π', 'üåü–≠–ª–∏—Ç–Ω—ã–µ –¥–µ–≤—É—à–∫–∏', '–ò–º–ø–µ—Ä–∏—è –õ—é–±–≤–∏', 'Bounty –†–∞–π—Å–∫–æ–µ –ù–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ', '‚ù§Ô∏è–°—Ç—Ä–∞—Å—Ç—å‚ù§Ô∏è', 'ESWE'];

        //Description
        $descriptions = [
            '–°–∫—É—á–∞—Ç—å –Ω–µ –¥–∞–º. –ü—Ä–∏–µ–∑–∂–∞–π –∏ –≤—Å–µ —É–≤–∏–¥–∏—à—å —Å–∞–º :-) :-) :-) –Ø —è—Ä–∫–∞—è, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∞—è—Å—è, —Å–∏–º–ø–∞—Ç–∏—á–Ω–∞—è, –æ—Ç–≤—è–∑–Ω–∞—è –¥–µ–≤—É—à–∫–∞. –°–æ –º–Ω–æ–π –Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ.–î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–¢–µ–±—è –ø–æ—Ä–∞–∑–∏—Ç —Ä–æ—Å–∫–æ—à–Ω–∞—è —É–ø—Ä—É–≥–∞—è –ø–æ–ø–∫–∞, —Ç–æ—á–µ–Ω–∞—è —Ñ–∏–≥—É—Ä–∫–∞, –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–π–Ω—ã–µ –Ω–æ–∂–∫–∏ –∏ –Ω–µ–∂–Ω–∞—è –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç–∞—è –∫–æ–∂–∞. –¢—ã –∏—Å–ø—ã—Ç–∞–µ—à—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–Ω–∏–∫–∞—è –≤ –º–æ–∏ —É–∑–µ–Ω—å–∫–∏–µ –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—ã—Ä–æ—á–∫–∏. –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–û—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —á–µ—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –æ—Å–≤–µ—Ç–ª–∏—Ç—å —Ç–µ–º–Ω—ã–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–æ–π –Ω–µ–∂–Ω—ã–π —Ä–∞–π....–û—á–∞—Ä–æ–≤–∞...',
            '–°—Ç—Ä–∞—Å—Ç–Ω–∞—è, —É—Ö–æ–∂–µ–Ω–Ω–∞—è, –∑–∞–≥–æ—Ä–µ–ª–∞—è, –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç –≤ –≥–æ—Å—Ç–∏ –º—É–∂—á–∏–Ω—É –¥–ª—è —Å—Ç–∞—Å—Ç–Ω–æ–≥–æ –∏ –≤–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞. –û—Ö—Ä–∞–Ω–∞ –µ—Å—Ç—å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ! –¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è! –ï—Å—Ç—å –ø–æ–¥—Ä—É–∂–∫–∞! –ñ–¥—É –í–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞!!!',
            '–≠—Å—Ç–µ—Ç–∏–∫–∞ –∏ —Ä–∞–∑–≤—Ä–∞—Ç, –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—É—à–∫–∞–º–∏ (–¥–ª—è –º–µ–Ω—è –∏ —Ç–µ–±—è), —Ñ–∏–ª—å–º–∞–º–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –ø–æ–ø–µ—Ä—Å–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã! –ö–∞–∫ –≤ —Å–∞–º–æ–º –≥–æ—Ä—è—á–µ–º –ø–æ—Ä–Ω–æ!',
            '–Ø—Ä–∫–∞—è, –ø—Ä–æ—Å—Ç–æ –±–µ–∑—É–º–Ω–æ —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –≤ –≥–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞! –í –æ–±—â–µ—Å—Ç–≤–µ —Å–∏–º–ø–∞—Ç–∏—á–Ω–æ–π, —Å—Ç—Ä–∞—Å—Ç–Ω–æ–π –∏ —É–º–µ–ª–æ–π –ª—é–±–æ–≤–Ω–∏—Ü—ã –í—ã –æ—Ç–¥–æ—Ö–Ω–µ—Ç–µ –∏ –¥—É—à–æ–π –∏ —Ç–µ–ª–æ–º, –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–¢–µ–±—è –ø–æ—Ä–∞–∑–∏—Ç —Ä–æ—Å–∫–æ—à–Ω–∞—è —É–ø—Ä—É–≥–∞—è –ø–æ–ø–∫–∞, —Ç–æ—á–µ–Ω–∞—è —Ñ–∏–≥—É—Ä–∫–∞, –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–π–Ω—ã–µ –Ω–æ–∂–∫–∏ –∏ –Ω–µ–∂–Ω–∞—è –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç–∞—è –∫–æ–∂–∞. –¢—ã –∏—Å–ø—ã—Ç–∞–µ—à—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–Ω–∏–∫–∞—è –≤ –º–æ–∏ —É–∑–µ–Ω—å–∫–∏–µ –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—ã—Ä–æ—á–∫–∏. –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–ì–æ—Ç–æ–≤–∞ —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—å –Ω–æ–∂–∫–∏ –ø–µ—Ä–µ–¥ –ª—é–±–∏—Ç–µ–ª–µ–º –ø–æ–ª–∞—Å–∫–∞—Ç—å —è–∑—ã—á–∫–æ–º... –û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–æ–∂—É—Å—å –∏ –ø–æ–¥–∞—Ä—é –æ–∫–µ–∞–Ω –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –ª–∞—Å–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è!!!!–î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–ú–æ–ª–æ–¥–∞—è, –≥–∏–±–∫–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è)–ü—Ä–∏–≥–ª–∞—à–∞—é –¥–æ–±—Ä–æ–≥–æ –∏ –ø–æ—Ä—è–¥–æ—á–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É. –í—Å—Ç—Ä–µ—á—É –Ω–∞–µ–¥–∏–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é!–í—Å–µ —Ñ–æ—Ç–æ –º–æ–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!!! –ü—Ä–∏—Ö–æ–¥–∏ –∫–æ –º–Ω–µ –∏ —è –æ–∫—É–Ω—É —Ç–µ–±—è –≤ –º–∏—Ä —Å–æ–±–ª–∞–∑–Ω–∞',
            '–≠—Å—Ç–µ—Ç–∏–∫–∞ –∏ —Ä–∞–∑–≤—Ä–∞—Ç, –ø—Ä–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—É—à–∫–∞–º–∏ (–¥–ª—è –º–µ–Ω—è –∏ —Ç–µ–±—è), —Ñ–∏–ª—å–º–∞–º–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –ø–æ–ø–µ—Ä—Å–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã! –ö–∞–∫ –≤ —Å–∞–º–æ–º –≥–æ—Ä—è—á–µ–º –ø–æ—Ä–Ω–æ!',
            '–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –∫—É–∫–æ–ª–∫–∞!!! –û–±–æ–∂–∞—é —Å–µ–∫—Å!!! –ó–≤–æ–Ω–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–≤–µ—á–∞—é –ª–∏—á–Ω–æ –Ø!!! –≠–ª–∏—Ç–Ω—ã–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.–í—Å–µ –¥–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–Ø—Ä–∫–∞—è, –∂–∏–≤–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–∫–µ—Ç–∫–∞... –Ø –ª—é–±–ª—é –¥—Ä–∞–∑–Ω–∏—Ç—å –∏ –≤–≤–æ–¥–∏—Ç—å –º—É–∂—á–∏–Ω –≤ –∏—Å–∫—É—à–µ–Ω–∏–µ!!! –ü—Ä–æ —Ç–∞–∫–∏—Ö –∫–∞–∫ —è –≥–æ–≤–æ—Ä—è—Ç , —á—Ç–æ —Ö–æ—á–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –≤—Å–µ–≥–¥–∞! –í—Å–µ –¥–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ',
            '–û—á–µ–Ω—å –º–∏–ª–∞—è –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è, —É—Ö–æ–∂–µ–Ω–Ω–∞—è! –í—Å—Ç—Ä–µ—á–∞—é—Å—å –≤ –ª—é–∫—Å –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö! –ü–∞—Ä–∫–æ–≤–∫–∞ —É –¥–æ–º–∞, —á–∏—Å—Ç—ã–π –ø–æ–¥—ä–µ–∑–¥. –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ –≤—ã–≥–ª—è–∂—É –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ –ª–∞—Å–∫–∞—é, –¥–∞—Ä—é –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é –ª—é–±—ã–µ –∂–µ–ª–∞–Ω–∏—è –º—É–∂—á–∏–Ω! –î–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é',
            '–¢–≤–æ—è –∫–æ—Ä–æ–ª–µ–≤–∞. –ò–¥–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –≤—Å–µ –æ–±—É—Å—Ç—Ä–æ–∏–ª–∞ –¥–ª—è –í–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞! –í–æ –¥–≤–æ—Ä–µ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.–§–æ—Ç–æ –º–æ–∏ 100%–ü—Ä–∏–µ–∑–∂–∞–π)–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–±—è!)–¢–∞–∫–∂–µ –≤—ã–µ–∑–∂–∞—é –Ω–∞ –≤—ã–µ–∑–¥.–í—Å–µ –¥–æ–ø—ã –æ–±—Å—É–∂–¥–∞—é –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ',
            '–Ø –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é –ª–µ–≥–∫–æ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–µ–ø—Ä–∏—Ç–≤–æ—Ä–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ª—é–±—ã–º –∫–∞–ø—Ä–∏–∑–∞–º –∏ –≤—Å—é —Å–≤–æ—é –ø–ª–æ—Ç—Å–∫—É—é –Ω–µ–∂–Ω–æ—Å—Ç—å. –û–±–ª–∞–¥–∞—é –≤—Å–µ–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ –∏–¥–µ–∞–ª—å–Ω–æ–π –ª—é–±–æ–≤–Ω–∏—Ü—ã - —Å–µ–∫—Å–∞–ø–∏–ª—å–Ω—ã–º —Ç–µ–ª–æ–º, —Å—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–æ–º, –Ω–µ–Ω–∞—Å—ã—Ç–Ω—ã–º —Å–µ–∫—Å-–∞–ø–ø–µ—Ç–∏—Ç–æ–º –∏ –±—É–π–Ω–æ–π —Ñ–∞–Ω—Ç–∞–∑–∏–µ–π.',
        ];

        $addresses = ['—É–ª.–°–µ–º–∞—à–∫–æ 48', '—É–ª.–ü—É—à–∫–∏–Ω–∞ 24', '—É–ª.–ü—É—à–∫–∏–Ω–∞ 9', '—É–ª.–ü—É—à–∫–∏–Ω–∞ 89', '—É–ª.–õ—É–Ω–∞—á–∞—Ä—Å–∫–æ–≥–æ 54', '—É–ª.–ú–æ—Å–∫–æ–≤—Å–∫–∞—è 44', '—É–ª.–ì–∞–≥–∞—Ä–∏–Ω–∞ 66', '—É–ª.–ü—É—à–∫–∏–Ω–∞ 82', '—É–ª.–ö—É–ª–∏–∫–æ–≤–∞ 1', '—É–ª.–ö–∏—Ä–æ–≤–∞ 88', '—É–ª.–õ–µ–Ω–∏–Ω–∞ 92', '—É–ª.–ö—É–ª–∏–∫–æ–≤–∞ 74', '—É–ª.–ö—É–ª–∏–∫–æ–≤–∞ 73', '—É–ª.–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ 64', '—É–ª.–ß–∞–ø–∞–µ–≤–∞ 21', '—É–ª.–ü—É—à–∫–∏–Ω–∞ 88', '—É–ª.–ì–∞–≥–∞—Ä–∏–Ω–∞ 6', '—É–ª.–ö—Ä–∞—Å–Ω–∞—è 28', '—É–ª.–ë–µ—Ä–µ–≥–æ–≤–∞—è 94', '—É–ª.–õ—É–Ω–∞—á–∞—Ä—Å–∫–æ–≥–æ 10', '—É–ª.–õ—É–Ω–∞—á–∞—Ä—Å–∫–æ–≥–æ 98', '—É–ª.–ö—É–∑–Ω–µ—Ü–æ–≤–∞ 80', '—É–ª.–ö—É–∑–Ω–µ—Ü–æ–≤–∞ 55', '—É–ª.–ë–æ–ª—å—à–∞—è 91', '—É–ª.–ö—Ä—ã–ª–æ–≤–∞ 36', '—É–ª.–ß–∞–ø–∞–µ–≤–∞ 31', '—É–ª.–ö—É–∑–Ω–µ—Ü–æ–≤–∞ 20', '—É–ª.–ó–µ–ª–µ–Ω–∞—è 77', '—É–ª.–õ—É–Ω–∞—á–∞—Ä—Å–∫–æ–≥–æ 65', '—É–ª.–ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 15', '—É–ª.–í–æ–π–∫–æ–≤–∞ 85', '—É–ª.–°—Ç–∞–¥–∏–æ–Ω–Ω–∞—è 81', '—É–ª.–ó–µ–ª–µ–Ω–∞—è 91', '—É–ª.–ù–æ–≤–∞—è 10', '—É–ª.–ì–∞–≥–∞—Ä–∏–Ω–∞ 80', '—É–ª.–ö–∞–ª–∏–Ω–∏–Ω–∞ 99', '—É–ª.–°–∞–¥–æ–≤–∞—è 37', '—É–ª.–°—Ç–∞–¥–∏–æ–Ω–Ω–∞—è 72', '—É–ª.–ö—Ä–∞—Å–Ω–∞—è 73', '—É–ª.–°–æ–≤–µ—Ç—Å–∫–∞—è 5', '—É–ª.–ú–æ—Å–∫–æ–≤—Å–∫–∞—è 80', '—É–ª.–ú–æ—Å–∫–æ–≤—Å–∫–∞—è 24', '—É–ª.–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ 12', '—É–ª.–ì–∞–≥–∞—Ä–∏–Ω–∞ 81', '—É–ª.–ü—É—à–∫–∏–Ω–∞ 46', '—É–ª.–ó–∞–≤–æ–¥—Å–∫–∞—è 74', '—É–ª.–°—Ç–∞–¥–∏–æ–Ω–Ω–∞—è 67', '—É–ª.–ö–∞–ª–∏–Ω–∏–Ω–∞ 71'];


        for ($i = 1; $i <= 10; $i++) {

            //User Id
            $user_id = Users::inRandomOrder()->value('id');

            //Uniq Uid
            $uniq_uid = $this->generateUniqueId($user_id.'_%s_%s');

            //City
            $cityId = City::inRandomOrder()->first();

            //Zone
            $rand_zone = rand(1, 20);
            if ($rand_zone > 5 && $rand_zone < 10) {
                $zoneId = Zone::where('city_id', $cityId->id)->inRandomOrder()->first()->id ?? null;
            } else {
                $zoneId = null;
            }

            //Metro
            $rand_metro = rand(1, 20);
            if ($rand_metro > 5 && $rand_metro < 10) {
                $metroId = Metro::where('city_id', $cityId->id)->inRandomOrder()->first()->id ?? null;
            } else {
                $metroId = null;
            }

            //Call type and time
            $work_time_type = rand(0, 1);
            if ($work_time_type) {
                $work_time = ["time_to" => rand(0, 12), "time_from" => rand(13, 24)];
            } else {
                $work_time = [];
            }

            //Messengers
            $messengers = [];
            $telegram = rand(0,1);
            if ($telegram) {
                $messengers['telegram'] = ['status' => 1, 'type' => (rand(0,1)) ? 'link' : 'login', 'content' => 'intimatecms'];
            } else {
                $messengers['telegram'] = ['status' => 0, 'type' => 'link', 'content' => null];
            }
            $whatsapp = rand(0,1);
            if ($whatsapp) {
                $messengers['whatsapp'] = ['status' => 1, 'content' => '+7956'.rand(100,999).rand(10,99).rand(10,99)];
            } else {
                $messengers['whatsapp'] = ['status' => 0, 'content' => null];
            }
            $instagram = rand(0,1);
            if ($instagram) {
                $messengers['instagram'] = ['status' => 1, 'content' => 'https://www.instagram.com/intimate_cms/'];
            } else {
                $messengers['instagram'] = ['status' => 0, 'content' => null];
            }

            $lat1 = $cityId->latitude;
            $lon1 = $cityId->longitude;
            $lat2 = ($lat1 + 0.26);
            $lon2 = ($lon1 - 0.26);
            $lat3 = ($lat2 - 0.26);
            $lon3 = ($lon2 + 0.26);
            $lat4 = ($lat2 - 0.26);
            $lon4 = ($lon2 + 0.26);
            $minLat = min($lat1, $lat2, $lat3, $lat4);
            $maxLat = max($lat1, $lat2, $lat3, $lat4);
            $minLon = min($lon1, $lon2, $lon3, $lon4);
            $maxLon = max($lon1, $lon2, $lon3, $lon4);
            $latitude = mt_rand($minLat * 1000000, $maxLat * 1000000) / 1000000;
            $longitude = mt_rand($minLon * 1000000, $maxLon * 1000000) / 1000000;

            $phone = '+7 ('.rand(100, 999).') '.rand(100, 999).'-'.rand(10, 99).'-'.rand(10, 99);
            $phone_one = '+7 ('.rand(100, 999).') '.rand(100, 999).'-'.rand(10, 99).'-'.rand(10, 99);
            $phone_two = '+7 ('.rand(100, 999).') '.rand(100, 999).'-'.rand(10, 99).'-'.rand(10, 99);

            $salon = Salon::create([
                'user_id' => $user_id,
                'uniq_uid' => $uniq_uid,
                'title' => $names[rand(0, (count($names) - 1))],
                'city_id' => $cityId->id,
                'phone' => $phone,
                'phone_one' => $phone_one,
                'phone_two' => $phone_two,
                'zone_id' => $zoneId,
                'metro_id' => $metroId,
                'messengers' => json_encode($messengers),
                'work_time_type' => $work_time_type,
                'work_time' => json_encode($work_time),
                'delete_code' => '252325',
                'latitude' => $latitude,
                'longitude' => $longitude,
                'price_day_in_one' => rand(1000, 2000),
                'price_day_in_two' => rand(2000, 3000),
                'price_day_out_one' => rand(3000, 4000),
                'price_day_out_two' => rand(4000, 5000),
                'price_night_in_one' => rand(7000, 8000),
                'price_night_in_night' => rand(8000, 9000),
                'price_night_out_one' => rand(9000, 10000),
                'price_night_out_night' => rand(10000, 13000),
                'address' => $addresses[rand(0, (count($addresses) - 1))],
                'desc' => $descriptions[rand(0, (count($descriptions) - 1))],
                'up_date' => Carbon::now()->subDays(rand(0, 30)),
                'moderation_id' => 1,
                'moderator_id' => 1,
                'publish' => 1,
                'publish_date' => Carbon::now()->addDays(rand(0, 30))->addHours(rand(0, 23))->addMinutes(rand(0, 59)),
                'created_at' => Carbon::now()->subDays(rand(0, 30))->addHours(rand(0, 23))->addMinutes(rand(0, 59)),
                'updated_at' => Carbon::now()->subDays(rand(0, 30))->addHours(rand(0, 23))->addMinutes(rand(0, 59)),
            ]);

            $salon_id = $salon->id;

            $content_main = 'images/salon/'.$uniq_uid.'/main';

            //Main Photo
            $image_main = $this->moveTempToFolder('/images/demo/post/'.rand(1, 47).'.png', $content_main, rand(199, 9999).'_'.$user_id.'_'.$uniq_uid);
            if ($image_main) {
                SalonContent::create(['salon_id' => $salon_id, 'user_id' => $user_id, 'file' => $image_main, 'type' => 'main']);
            }
        }
    }

    public function moveTempToFolder($image, $new_path, $target): ?string
    {
        $image_path = public_path($image);
        $directory = public_path($new_path);

        if (!File::exists($directory)) {
            File::makeDirectory($directory, 0755, true);
        }

        $files = File::files($directory);
        foreach ($files as $file) {
            if (preg_match('/\b' . preg_quote(mb_strtolower($target), '/') . '\b/', mb_strtolower($file->getFilename()))) {
                File::delete($file->getRealPath());
            }
        }

        $new_image_name = mb_strtolower($target) . '.' . File::extension($image_path);
        $new_image_path = $directory . '/' . $new_image_name;

        if (File::exists($image_path)) {
            File::copy($image_path, $new_image_path);
            $normalizedPath = str_replace('\\', '/', $new_image_path);
            $relativePath = strstr($normalizedPath, 'images');
            return '/' . $relativePath;
        } else {
            return null;
        }
    }

    public function generateUniqueId($template = '%s_%s'): string
    {
        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $partsCount = substr_count($template, '%s');
        $parts = [];
        for ($i = 0; $i < $partsCount; $i++) {
            $parts[] = substr(str_shuffle($characters), 0, 4);
        }
        return vsprintf($template, $parts);
    }
}
